from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from configs import *
from utilities import short_link, save_data


@Client.on_message(filters.command('start') & filters.private)
async def start_handler(c, m):
    try:
        await db.add_user(m.from_user.id)
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("H·¥á ü·¥© M·¥á…¥·¥ú üî±", callback_data="help")],
                [InlineKeyboardButton("C ú·¥Ä…¥…¥·¥á ü üç©", url="https://telegram.me/R2K_Bots"),
                 InlineKeyboardButton("R·¥á·¥ò·¥è üõ†", url="https://telegram.me/ProfessorR2k")],
                [InlineKeyboardButton("C ü·¥ès·¥á ‚ùå", callback_data="delete")]
            ]
        )
        await m.reply_text(
            START_TXT.format(m.from_user.mention),
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"Start handler error: {e}")


@Client.on_message(filters.command('shortlink') & filters.private)
async def save_shortlink(c, m):
    if len(m.command) < 3:
        await m.reply_text(
            "<b>üïäÔ∏è C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö I…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á:\n\n"
            "P·¥ú·¥õ S ú·¥è Ä·¥õ…¥·¥á Ä URL & API A ü·¥è…¥…¢ W…™·¥õ ú T ú·¥á C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.\n\n"
            "Ex: <code>/shortlink example.com api_key</code>\n"
            "‚ö° U·¥ò·¥Ö·¥Ä·¥õ·¥ás - @R2K_Bots</b>"
        )
        return

    usr = m.from_user
    shortner_url = m.command[1].replace("/", "").replace("https:", "").replace("http:", "")
    api_key = m.command[2]

    saved = await save_data(shortner_url, api_key, uid=usr.id)
    if saved:
        await m.reply_text(
            f"üìç S ú·¥è Ä·¥õ…¥·¥á Ä H·¥Äs B·¥á·¥á…¥ S·¥á·¥õ S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!\n\n"
            f"S ú·¥è Ä·¥õ…¥·¥á Ä URL - `{await db.get_value('shortner', uid=usr.id)}`\n"
            f"Shortner API - `{await db.get_value('api', uid=usr.id)}`\n"
            f"‚ö° U·¥ò·¥Ö·¥Ä·¥õ·¥ás - @R2K_Bots"
        )
    else:
        await m.reply_text(
            "üå∂Ô∏è E Ä Ä·¥è Ä:\n\n"
            "Y·¥è·¥ú Ä S ú·¥è Ä·¥õ…¥·¥á Ä API or URL Is I…¥·¥†·¥Ä ü…™·¥Ö.\n"
            "P ü·¥á·¥Äs·¥á C ú·¥á·¥Ñ·¥ã A…¢·¥Ä…™…¥!"
        )


@Client.on_message(filters.text & filters.private)
async def shorten_link(_, m):
    txt = m.text
    if not ("http://" in txt or "https://" in txt):
        await m.reply_text("‚ö†Ô∏è Send a valid URL that starts with http:// or https:// to shorten.")
        return

    usr = m.from_user
    shortner_url = await db.get_value("shortner", uid=usr.id)
    api_key = await db.get_value("api", uid=usr.id)

    if not shortner_url or not api_key:
        await m.reply_text(
            "‚ùó You haven't set your shortener yet.\n\n"
            "Use the command:\n<code>/shortlink example.com your_api_key</code>"
        )
        return

    try:
        short = await short_link(link=txt, uid=usr.id)
        msg = f"__H·¥á Ä·¥á ·¥Ä Ä·¥á  è·¥è·¥ú Ä S ú·¥è Ä·¥õ L…™…¥·¥ãs__:\n\n<code>{short}</code>"
        await m.reply_text(msg)
    except Exception as e:
        await m.reply_text(f"Error shortening link: {e}")
